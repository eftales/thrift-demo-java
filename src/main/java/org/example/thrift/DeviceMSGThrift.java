/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-09-05")
public class DeviceMSGThrift implements org.apache.thrift.TBase<DeviceMSGThrift, DeviceMSGThrift._Fields>, java.io.Serializable, Cloneable, Comparable<DeviceMSGThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceMSGThrift");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField AUTH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("authTime", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DHCP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dhcpTime", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COLONY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("colonyID", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SW_CAPABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("swCapability", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField FORWARD_CAPABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardCapability", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField PORT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("portNum", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PEERS_FIELD_DESC = new org.apache.thrift.protocol.TField("peers", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField PORT_CAPABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("portCapability", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField PORT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("portState", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField PORT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("portRate", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeviceMSGThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeviceMSGThriftTupleSchemeFactory();

  public byte type; // required
  public byte state; // required
  public int authTime; // required
  public int dhcpTime; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ip; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String colonyID; // required
  public byte swCapability; // required
  public byte forwardCapability; // required
  public int portNum; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> peers; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portCapability; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portState; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portRate; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String key; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    STATE((short)2, "state"),
    AUTH_TIME((short)3, "authTime"),
    DHCP_TIME((short)4, "dhcpTime"),
    IP((short)5, "ip"),
    COLONY_ID((short)6, "colonyID"),
    SW_CAPABILITY((short)7, "swCapability"),
    FORWARD_CAPABILITY((short)8, "forwardCapability"),
    PORT_NUM((short)9, "portNum"),
    PEERS((short)10, "peers"),
    PORT_CAPABILITY((short)11, "portCapability"),
    PORT_STATE((short)12, "portState"),
    PORT_RATE((short)13, "portRate"),
    KEY((short)14, "key");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // STATE
          return STATE;
        case 3: // AUTH_TIME
          return AUTH_TIME;
        case 4: // DHCP_TIME
          return DHCP_TIME;
        case 5: // IP
          return IP;
        case 6: // COLONY_ID
          return COLONY_ID;
        case 7: // SW_CAPABILITY
          return SW_CAPABILITY;
        case 8: // FORWARD_CAPABILITY
          return FORWARD_CAPABILITY;
        case 9: // PORT_NUM
          return PORT_NUM;
        case 10: // PEERS
          return PEERS;
        case 11: // PORT_CAPABILITY
          return PORT_CAPABILITY;
        case 12: // PORT_STATE
          return PORT_STATE;
        case 13: // PORT_RATE
          return PORT_RATE;
        case 14: // KEY
          return KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __STATE_ISSET_ID = 1;
  private static final int __AUTHTIME_ISSET_ID = 2;
  private static final int __DHCPTIME_ISSET_ID = 3;
  private static final int __SWCAPABILITY_ISSET_ID = 4;
  private static final int __FORWARDCAPABILITY_ISSET_ID = 5;
  private static final int __PORTNUM_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AUTH_TIME, new org.apache.thrift.meta_data.FieldMetaData("authTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DHCP_TIME, new org.apache.thrift.meta_data.FieldMetaData("dhcpTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLONY_ID, new org.apache.thrift.meta_data.FieldMetaData("colonyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SW_CAPABILITY, new org.apache.thrift.meta_data.FieldMetaData("swCapability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.FORWARD_CAPABILITY, new org.apache.thrift.meta_data.FieldMetaData("forwardCapability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PORT_NUM, new org.apache.thrift.meta_data.FieldMetaData("portNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PEERS, new org.apache.thrift.meta_data.FieldMetaData("peers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.PORT_CAPABILITY, new org.apache.thrift.meta_data.FieldMetaData("portCapability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PORT_STATE, new org.apache.thrift.meta_data.FieldMetaData("portState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PORT_RATE, new org.apache.thrift.meta_data.FieldMetaData("portRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceMSGThrift.class, metaDataMap);
  }

  public DeviceMSGThrift() {
  }

  public DeviceMSGThrift(
    byte type,
    byte state,
    int authTime,
    int dhcpTime,
    java.lang.String ip,
    java.lang.String colonyID,
    byte swCapability,
    byte forwardCapability,
    int portNum,
    java.util.List<java.util.List<java.lang.String>> peers,
    java.util.List<java.lang.Byte> portCapability,
    java.util.List<java.lang.Byte> portState,
    java.util.List<java.lang.Byte> portRate,
    java.lang.String key)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.state = state;
    setStateIsSet(true);
    this.authTime = authTime;
    setAuthTimeIsSet(true);
    this.dhcpTime = dhcpTime;
    setDhcpTimeIsSet(true);
    this.ip = ip;
    this.colonyID = colonyID;
    this.swCapability = swCapability;
    setSwCapabilityIsSet(true);
    this.forwardCapability = forwardCapability;
    setForwardCapabilityIsSet(true);
    this.portNum = portNum;
    setPortNumIsSet(true);
    this.peers = peers;
    this.portCapability = portCapability;
    this.portState = portState;
    this.portRate = portRate;
    this.key = key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceMSGThrift(DeviceMSGThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.type = other.type;
    this.state = other.state;
    this.authTime = other.authTime;
    this.dhcpTime = other.dhcpTime;
    if (other.isSetIp()) {
      this.ip = other.ip;
    }
    if (other.isSetColonyID()) {
      this.colonyID = other.colonyID;
    }
    this.swCapability = other.swCapability;
    this.forwardCapability = other.forwardCapability;
    this.portNum = other.portNum;
    if (other.isSetPeers()) {
      java.util.List<java.util.List<java.lang.String>> __this__peers = new java.util.ArrayList<java.util.List<java.lang.String>>(other.peers.size());
      for (java.util.List<java.lang.String> other_element : other.peers) {
        java.util.List<java.lang.String> __this__peers_copy = new java.util.ArrayList<java.lang.String>(other_element);
        __this__peers.add(__this__peers_copy);
      }
      this.peers = __this__peers;
    }
    if (other.isSetPortCapability()) {
      java.util.List<java.lang.Byte> __this__portCapability = new java.util.ArrayList<java.lang.Byte>(other.portCapability);
      this.portCapability = __this__portCapability;
    }
    if (other.isSetPortState()) {
      java.util.List<java.lang.Byte> __this__portState = new java.util.ArrayList<java.lang.Byte>(other.portState);
      this.portState = __this__portState;
    }
    if (other.isSetPortRate()) {
      java.util.List<java.lang.Byte> __this__portRate = new java.util.ArrayList<java.lang.Byte>(other.portRate);
      this.portRate = __this__portRate;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
  }

  public DeviceMSGThrift deepCopy() {
    return new DeviceMSGThrift(this);
  }

  @Override
  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setStateIsSet(false);
    this.state = 0;
    setAuthTimeIsSet(false);
    this.authTime = 0;
    setDhcpTimeIsSet(false);
    this.dhcpTime = 0;
    this.ip = null;
    this.colonyID = null;
    setSwCapabilityIsSet(false);
    this.swCapability = 0;
    setForwardCapabilityIsSet(false);
    this.forwardCapability = 0;
    setPortNumIsSet(false);
    this.portNum = 0;
    this.peers = null;
    this.portCapability = null;
    this.portState = null;
    this.portRate = null;
    this.key = null;
  }

  public byte getType() {
    return this.type;
  }

  public DeviceMSGThrift setType(byte type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public byte getState() {
    return this.state;
  }

  public DeviceMSGThrift setState(byte state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getAuthTime() {
    return this.authTime;
  }

  public DeviceMSGThrift setAuthTime(int authTime) {
    this.authTime = authTime;
    setAuthTimeIsSet(true);
    return this;
  }

  public void unsetAuthTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTHTIME_ISSET_ID);
  }

  /** Returns true if field authTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTHTIME_ISSET_ID);
  }

  public void setAuthTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTHTIME_ISSET_ID, value);
  }

  public int getDhcpTime() {
    return this.dhcpTime;
  }

  public DeviceMSGThrift setDhcpTime(int dhcpTime) {
    this.dhcpTime = dhcpTime;
    setDhcpTimeIsSet(true);
    return this;
  }

  public void unsetDhcpTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DHCPTIME_ISSET_ID);
  }

  /** Returns true if field dhcpTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDhcpTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DHCPTIME_ISSET_ID);
  }

  public void setDhcpTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DHCPTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIp() {
    return this.ip;
  }

  public DeviceMSGThrift setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
    this.ip = ip;
    return this;
  }

  public void unsetIp() {
    this.ip = null;
  }

  /** Returns true if field ip is set (has been assigned a value) and false otherwise */
  public boolean isSetIp() {
    return this.ip != null;
  }

  public void setIpIsSet(boolean value) {
    if (!value) {
      this.ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColonyID() {
    return this.colonyID;
  }

  public DeviceMSGThrift setColonyID(@org.apache.thrift.annotation.Nullable java.lang.String colonyID) {
    this.colonyID = colonyID;
    return this;
  }

  public void unsetColonyID() {
    this.colonyID = null;
  }

  /** Returns true if field colonyID is set (has been assigned a value) and false otherwise */
  public boolean isSetColonyID() {
    return this.colonyID != null;
  }

  public void setColonyIDIsSet(boolean value) {
    if (!value) {
      this.colonyID = null;
    }
  }

  public byte getSwCapability() {
    return this.swCapability;
  }

  public DeviceMSGThrift setSwCapability(byte swCapability) {
    this.swCapability = swCapability;
    setSwCapabilityIsSet(true);
    return this;
  }

  public void unsetSwCapability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SWCAPABILITY_ISSET_ID);
  }

  /** Returns true if field swCapability is set (has been assigned a value) and false otherwise */
  public boolean isSetSwCapability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SWCAPABILITY_ISSET_ID);
  }

  public void setSwCapabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SWCAPABILITY_ISSET_ID, value);
  }

  public byte getForwardCapability() {
    return this.forwardCapability;
  }

  public DeviceMSGThrift setForwardCapability(byte forwardCapability) {
    this.forwardCapability = forwardCapability;
    setForwardCapabilityIsSet(true);
    return this;
  }

  public void unsetForwardCapability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARDCAPABILITY_ISSET_ID);
  }

  /** Returns true if field forwardCapability is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardCapability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARDCAPABILITY_ISSET_ID);
  }

  public void setForwardCapabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARDCAPABILITY_ISSET_ID, value);
  }

  public int getPortNum() {
    return this.portNum;
  }

  public DeviceMSGThrift setPortNum(int portNum) {
    this.portNum = portNum;
    setPortNumIsSet(true);
    return this;
  }

  public void unsetPortNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORTNUM_ISSET_ID);
  }

  /** Returns true if field portNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPortNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORTNUM_ISSET_ID);
  }

  public void setPortNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORTNUM_ISSET_ID, value);
  }

  public int getPeersSize() {
    return (this.peers == null) ? 0 : this.peers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.String>> getPeersIterator() {
    return (this.peers == null) ? null : this.peers.iterator();
  }

  public void addToPeers(java.util.List<java.lang.String> elem) {
    if (this.peers == null) {
      this.peers = new java.util.ArrayList<java.util.List<java.lang.String>>();
    }
    this.peers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.String>> getPeers() {
    return this.peers;
  }

  public DeviceMSGThrift setPeers(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.String>> peers) {
    this.peers = peers;
    return this;
  }

  public void unsetPeers() {
    this.peers = null;
  }

  /** Returns true if field peers is set (has been assigned a value) and false otherwise */
  public boolean isSetPeers() {
    return this.peers != null;
  }

  public void setPeersIsSet(boolean value) {
    if (!value) {
      this.peers = null;
    }
  }

  public int getPortCapabilitySize() {
    return (this.portCapability == null) ? 0 : this.portCapability.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getPortCapabilityIterator() {
    return (this.portCapability == null) ? null : this.portCapability.iterator();
  }

  public void addToPortCapability(byte elem) {
    if (this.portCapability == null) {
      this.portCapability = new java.util.ArrayList<java.lang.Byte>();
    }
    this.portCapability.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getPortCapability() {
    return this.portCapability;
  }

  public DeviceMSGThrift setPortCapability(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portCapability) {
    this.portCapability = portCapability;
    return this;
  }

  public void unsetPortCapability() {
    this.portCapability = null;
  }

  /** Returns true if field portCapability is set (has been assigned a value) and false otherwise */
  public boolean isSetPortCapability() {
    return this.portCapability != null;
  }

  public void setPortCapabilityIsSet(boolean value) {
    if (!value) {
      this.portCapability = null;
    }
  }

  public int getPortStateSize() {
    return (this.portState == null) ? 0 : this.portState.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getPortStateIterator() {
    return (this.portState == null) ? null : this.portState.iterator();
  }

  public void addToPortState(byte elem) {
    if (this.portState == null) {
      this.portState = new java.util.ArrayList<java.lang.Byte>();
    }
    this.portState.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getPortState() {
    return this.portState;
  }

  public DeviceMSGThrift setPortState(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portState) {
    this.portState = portState;
    return this;
  }

  public void unsetPortState() {
    this.portState = null;
  }

  /** Returns true if field portState is set (has been assigned a value) and false otherwise */
  public boolean isSetPortState() {
    return this.portState != null;
  }

  public void setPortStateIsSet(boolean value) {
    if (!value) {
      this.portState = null;
    }
  }

  public int getPortRateSize() {
    return (this.portRate == null) ? 0 : this.portRate.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Byte> getPortRateIterator() {
    return (this.portRate == null) ? null : this.portRate.iterator();
  }

  public void addToPortRate(byte elem) {
    if (this.portRate == null) {
      this.portRate = new java.util.ArrayList<java.lang.Byte>();
    }
    this.portRate.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Byte> getPortRate() {
    return this.portRate;
  }

  public DeviceMSGThrift setPortRate(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Byte> portRate) {
    this.portRate = portRate;
    return this;
  }

  public void unsetPortRate() {
    this.portRate = null;
  }

  /** Returns true if field portRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPortRate() {
    return this.portRate != null;
  }

  public void setPortRateIsSet(boolean value) {
    if (!value) {
      this.portRate = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKey() {
    return this.key;
  }

  public DeviceMSGThrift setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.Byte)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.Byte)value);
      }
      break;

    case AUTH_TIME:
      if (value == null) {
        unsetAuthTime();
      } else {
        setAuthTime((java.lang.Integer)value);
      }
      break;

    case DHCP_TIME:
      if (value == null) {
        unsetDhcpTime();
      } else {
        setDhcpTime((java.lang.Integer)value);
      }
      break;

    case IP:
      if (value == null) {
        unsetIp();
      } else {
        setIp((java.lang.String)value);
      }
      break;

    case COLONY_ID:
      if (value == null) {
        unsetColonyID();
      } else {
        setColonyID((java.lang.String)value);
      }
      break;

    case SW_CAPABILITY:
      if (value == null) {
        unsetSwCapability();
      } else {
        setSwCapability((java.lang.Byte)value);
      }
      break;

    case FORWARD_CAPABILITY:
      if (value == null) {
        unsetForwardCapability();
      } else {
        setForwardCapability((java.lang.Byte)value);
      }
      break;

    case PORT_NUM:
      if (value == null) {
        unsetPortNum();
      } else {
        setPortNum((java.lang.Integer)value);
      }
      break;

    case PEERS:
      if (value == null) {
        unsetPeers();
      } else {
        setPeers((java.util.List<java.util.List<java.lang.String>>)value);
      }
      break;

    case PORT_CAPABILITY:
      if (value == null) {
        unsetPortCapability();
      } else {
        setPortCapability((java.util.List<java.lang.Byte>)value);
      }
      break;

    case PORT_STATE:
      if (value == null) {
        unsetPortState();
      } else {
        setPortState((java.util.List<java.lang.Byte>)value);
      }
      break;

    case PORT_RATE:
      if (value == null) {
        unsetPortRate();
      } else {
        setPortRate((java.util.List<java.lang.Byte>)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case STATE:
      return getState();

    case AUTH_TIME:
      return getAuthTime();

    case DHCP_TIME:
      return getDhcpTime();

    case IP:
      return getIp();

    case COLONY_ID:
      return getColonyID();

    case SW_CAPABILITY:
      return getSwCapability();

    case FORWARD_CAPABILITY:
      return getForwardCapability();

    case PORT_NUM:
      return getPortNum();

    case PEERS:
      return getPeers();

    case PORT_CAPABILITY:
      return getPortCapability();

    case PORT_STATE:
      return getPortState();

    case PORT_RATE:
      return getPortRate();

    case KEY:
      return getKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case STATE:
      return isSetState();
    case AUTH_TIME:
      return isSetAuthTime();
    case DHCP_TIME:
      return isSetDhcpTime();
    case IP:
      return isSetIp();
    case COLONY_ID:
      return isSetColonyID();
    case SW_CAPABILITY:
      return isSetSwCapability();
    case FORWARD_CAPABILITY:
      return isSetForwardCapability();
    case PORT_NUM:
      return isSetPortNum();
    case PEERS:
      return isSetPeers();
    case PORT_CAPABILITY:
      return isSetPortCapability();
    case PORT_STATE:
      return isSetPortState();
    case PORT_RATE:
      return isSetPortRate();
    case KEY:
      return isSetKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceMSGThrift)
      return this.equals((DeviceMSGThrift)that);
    return false;
  }

  public boolean equals(DeviceMSGThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_authTime = true;
    boolean that_present_authTime = true;
    if (this_present_authTime || that_present_authTime) {
      if (!(this_present_authTime && that_present_authTime))
        return false;
      if (this.authTime != that.authTime)
        return false;
    }

    boolean this_present_dhcpTime = true;
    boolean that_present_dhcpTime = true;
    if (this_present_dhcpTime || that_present_dhcpTime) {
      if (!(this_present_dhcpTime && that_present_dhcpTime))
        return false;
      if (this.dhcpTime != that.dhcpTime)
        return false;
    }

    boolean this_present_ip = true && this.isSetIp();
    boolean that_present_ip = true && that.isSetIp();
    if (this_present_ip || that_present_ip) {
      if (!(this_present_ip && that_present_ip))
        return false;
      if (!this.ip.equals(that.ip))
        return false;
    }

    boolean this_present_colonyID = true && this.isSetColonyID();
    boolean that_present_colonyID = true && that.isSetColonyID();
    if (this_present_colonyID || that_present_colonyID) {
      if (!(this_present_colonyID && that_present_colonyID))
        return false;
      if (!this.colonyID.equals(that.colonyID))
        return false;
    }

    boolean this_present_swCapability = true;
    boolean that_present_swCapability = true;
    if (this_present_swCapability || that_present_swCapability) {
      if (!(this_present_swCapability && that_present_swCapability))
        return false;
      if (this.swCapability != that.swCapability)
        return false;
    }

    boolean this_present_forwardCapability = true;
    boolean that_present_forwardCapability = true;
    if (this_present_forwardCapability || that_present_forwardCapability) {
      if (!(this_present_forwardCapability && that_present_forwardCapability))
        return false;
      if (this.forwardCapability != that.forwardCapability)
        return false;
    }

    boolean this_present_portNum = true;
    boolean that_present_portNum = true;
    if (this_present_portNum || that_present_portNum) {
      if (!(this_present_portNum && that_present_portNum))
        return false;
      if (this.portNum != that.portNum)
        return false;
    }

    boolean this_present_peers = true && this.isSetPeers();
    boolean that_present_peers = true && that.isSetPeers();
    if (this_present_peers || that_present_peers) {
      if (!(this_present_peers && that_present_peers))
        return false;
      if (!this.peers.equals(that.peers))
        return false;
    }

    boolean this_present_portCapability = true && this.isSetPortCapability();
    boolean that_present_portCapability = true && that.isSetPortCapability();
    if (this_present_portCapability || that_present_portCapability) {
      if (!(this_present_portCapability && that_present_portCapability))
        return false;
      if (!this.portCapability.equals(that.portCapability))
        return false;
    }

    boolean this_present_portState = true && this.isSetPortState();
    boolean that_present_portState = true && that.isSetPortState();
    if (this_present_portState || that_present_portState) {
      if (!(this_present_portState && that_present_portState))
        return false;
      if (!this.portState.equals(that.portState))
        return false;
    }

    boolean this_present_portRate = true && this.isSetPortRate();
    boolean that_present_portRate = true && that.isSetPortRate();
    if (this_present_portRate || that_present_portRate) {
      if (!(this_present_portRate && that_present_portRate))
        return false;
      if (!this.portRate.equals(that.portRate))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (type);

    hashCode = hashCode * 8191 + (int) (state);

    hashCode = hashCode * 8191 + authTime;

    hashCode = hashCode * 8191 + dhcpTime;

    hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
    if (isSetIp())
      hashCode = hashCode * 8191 + ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetColonyID()) ? 131071 : 524287);
    if (isSetColonyID())
      hashCode = hashCode * 8191 + colonyID.hashCode();

    hashCode = hashCode * 8191 + (int) (swCapability);

    hashCode = hashCode * 8191 + (int) (forwardCapability);

    hashCode = hashCode * 8191 + portNum;

    hashCode = hashCode * 8191 + ((isSetPeers()) ? 131071 : 524287);
    if (isSetPeers())
      hashCode = hashCode * 8191 + peers.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortCapability()) ? 131071 : 524287);
    if (isSetPortCapability())
      hashCode = hashCode * 8191 + portCapability.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortState()) ? 131071 : 524287);
    if (isSetPortState())
      hashCode = hashCode * 8191 + portState.hashCode();

    hashCode = hashCode * 8191 + ((isSetPortRate()) ? 131071 : 524287);
    if (isSetPortRate())
      hashCode = hashCode * 8191 + portRate.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DeviceMSGThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAuthTime()).compareTo(other.isSetAuthTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authTime, other.authTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDhcpTime()).compareTo(other.isSetDhcpTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDhcpTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dhcpTime, other.dhcpTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetColonyID()).compareTo(other.isSetColonyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColonyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.colonyID, other.colonyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSwCapability()).compareTo(other.isSetSwCapability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSwCapability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swCapability, other.swCapability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetForwardCapability()).compareTo(other.isSetForwardCapability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardCapability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardCapability, other.forwardCapability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortNum()).compareTo(other.isSetPortNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portNum, other.portNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPeers()).compareTo(other.isSetPeers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.peers, other.peers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortCapability()).compareTo(other.isSetPortCapability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortCapability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portCapability, other.portCapability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortState()).compareTo(other.isSetPortState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portState, other.portState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPortRate()).compareTo(other.isSetPortRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPortRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portRate, other.portRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DeviceMSGThrift(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authTime:");
    sb.append(this.authTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dhcpTime:");
    sb.append(this.dhcpTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ip:");
    if (this.ip == null) {
      sb.append("null");
    } else {
      sb.append(this.ip);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("colonyID:");
    if (this.colonyID == null) {
      sb.append("null");
    } else {
      sb.append(this.colonyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("swCapability:");
    sb.append(this.swCapability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forwardCapability:");
    sb.append(this.forwardCapability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("portNum:");
    sb.append(this.portNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("peers:");
    if (this.peers == null) {
      sb.append("null");
    } else {
      sb.append(this.peers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portCapability:");
    if (this.portCapability == null) {
      sb.append("null");
    } else {
      sb.append(this.portCapability);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portState:");
    if (this.portState == null) {
      sb.append("null");
    } else {
      sb.append(this.portState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("portRate:");
    if (this.portRate == null) {
      sb.append("null");
    } else {
      sb.append(this.portRate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceMSGThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceMSGThriftStandardScheme getScheme() {
      return new DeviceMSGThriftStandardScheme();
    }
  }

  private static class DeviceMSGThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeviceMSGThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceMSGThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.type = iprot.readByte();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.state = iprot.readByte();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authTime = iprot.readI32();
              struct.setAuthTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DHCP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dhcpTime = iprot.readI32();
              struct.setDhcpTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ip = iprot.readString();
              struct.setIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLONY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.colonyID = iprot.readString();
              struct.setColonyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SW_CAPABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.swCapability = iprot.readByte();
              struct.setSwCapabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FORWARD_CAPABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.forwardCapability = iprot.readByte();
              struct.setForwardCapabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PORT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.portNum = iprot.readI32();
              struct.setPortNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PEERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.peers = new java.util.ArrayList<java.util.List<java.lang.String>>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<java.lang.String>(_list3.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      _elem4 = iprot.readString();
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.peers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPeersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PORT_CAPABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.portCapability = new java.util.ArrayList<java.lang.Byte>(_list6.size);
                byte _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readByte();
                  struct.portCapability.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setPortCapabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PORT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.portState = new java.util.ArrayList<java.lang.Byte>(_list9.size);
                byte _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readByte();
                  struct.portState.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setPortStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PORT_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.portRate = new java.util.ArrayList<java.lang.Byte>(_list12.size);
                byte _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readByte();
                  struct.portRate.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setPortRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceMSGThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeByte(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeByte(struct.state);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTH_TIME_FIELD_DESC);
      oprot.writeI32(struct.authTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DHCP_TIME_FIELD_DESC);
      oprot.writeI32(struct.dhcpTime);
      oprot.writeFieldEnd();
      if (struct.ip != null) {
        oprot.writeFieldBegin(IP_FIELD_DESC);
        oprot.writeString(struct.ip);
        oprot.writeFieldEnd();
      }
      if (struct.colonyID != null) {
        oprot.writeFieldBegin(COLONY_ID_FIELD_DESC);
        oprot.writeString(struct.colonyID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SW_CAPABILITY_FIELD_DESC);
      oprot.writeByte(struct.swCapability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FORWARD_CAPABILITY_FIELD_DESC);
      oprot.writeByte(struct.forwardCapability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PORT_NUM_FIELD_DESC);
      oprot.writeI32(struct.portNum);
      oprot.writeFieldEnd();
      if (struct.peers != null) {
        oprot.writeFieldBegin(PEERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.peers.size()));
          for (java.util.List<java.lang.String> _iter15 : struct.peers)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter15.size()));
              for (java.lang.String _iter16 : _iter15)
              {
                oprot.writeString(_iter16);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.portCapability != null) {
        oprot.writeFieldBegin(PORT_CAPABILITY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.portCapability.size()));
          for (byte _iter17 : struct.portCapability)
          {
            oprot.writeByte(_iter17);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.portState != null) {
        oprot.writeFieldBegin(PORT_STATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.portState.size()));
          for (byte _iter18 : struct.portState)
          {
            oprot.writeByte(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.portRate != null) {
        oprot.writeFieldBegin(PORT_RATE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.portRate.size()));
          for (byte _iter19 : struct.portRate)
          {
            oprot.writeByte(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceMSGThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DeviceMSGThriftTupleScheme getScheme() {
      return new DeviceMSGThriftTupleScheme();
    }
  }

  private static class DeviceMSGThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeviceMSGThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceMSGThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      if (struct.isSetAuthTime()) {
        optionals.set(2);
      }
      if (struct.isSetDhcpTime()) {
        optionals.set(3);
      }
      if (struct.isSetIp()) {
        optionals.set(4);
      }
      if (struct.isSetColonyID()) {
        optionals.set(5);
      }
      if (struct.isSetSwCapability()) {
        optionals.set(6);
      }
      if (struct.isSetForwardCapability()) {
        optionals.set(7);
      }
      if (struct.isSetPortNum()) {
        optionals.set(8);
      }
      if (struct.isSetPeers()) {
        optionals.set(9);
      }
      if (struct.isSetPortCapability()) {
        optionals.set(10);
      }
      if (struct.isSetPortState()) {
        optionals.set(11);
      }
      if (struct.isSetPortRate()) {
        optionals.set(12);
      }
      if (struct.isSetKey()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetType()) {
        oprot.writeByte(struct.type);
      }
      if (struct.isSetState()) {
        oprot.writeByte(struct.state);
      }
      if (struct.isSetAuthTime()) {
        oprot.writeI32(struct.authTime);
      }
      if (struct.isSetDhcpTime()) {
        oprot.writeI32(struct.dhcpTime);
      }
      if (struct.isSetIp()) {
        oprot.writeString(struct.ip);
      }
      if (struct.isSetColonyID()) {
        oprot.writeString(struct.colonyID);
      }
      if (struct.isSetSwCapability()) {
        oprot.writeByte(struct.swCapability);
      }
      if (struct.isSetForwardCapability()) {
        oprot.writeByte(struct.forwardCapability);
      }
      if (struct.isSetPortNum()) {
        oprot.writeI32(struct.portNum);
      }
      if (struct.isSetPeers()) {
        {
          oprot.writeI32(struct.peers.size());
          for (java.util.List<java.lang.String> _iter20 : struct.peers)
          {
            {
              oprot.writeI32(_iter20.size());
              for (java.lang.String _iter21 : _iter20)
              {
                oprot.writeString(_iter21);
              }
            }
          }
        }
      }
      if (struct.isSetPortCapability()) {
        {
          oprot.writeI32(struct.portCapability.size());
          for (byte _iter22 : struct.portCapability)
          {
            oprot.writeByte(_iter22);
          }
        }
      }
      if (struct.isSetPortState()) {
        {
          oprot.writeI32(struct.portState.size());
          for (byte _iter23 : struct.portState)
          {
            oprot.writeByte(_iter23);
          }
        }
      }
      if (struct.isSetPortRate()) {
        {
          oprot.writeI32(struct.portRate.size());
          for (byte _iter24 : struct.portRate)
          {
            oprot.writeByte(_iter24);
          }
        }
      }
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceMSGThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.type = iprot.readByte();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = iprot.readByte();
        struct.setStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.authTime = iprot.readI32();
        struct.setAuthTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dhcpTime = iprot.readI32();
        struct.setDhcpTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ip = iprot.readString();
        struct.setIpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.colonyID = iprot.readString();
        struct.setColonyIDIsSet(true);
      }
      if (incoming.get(6)) {
        struct.swCapability = iprot.readByte();
        struct.setSwCapabilityIsSet(true);
      }
      if (incoming.get(7)) {
        struct.forwardCapability = iprot.readByte();
        struct.setForwardCapabilityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.portNum = iprot.readI32();
        struct.setPortNumIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list25 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.peers = new java.util.ArrayList<java.util.List<java.lang.String>>(_list25.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _elem26;
          for (int _i27 = 0; _i27 < _list25.size; ++_i27)
          {
            {
              org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _elem26 = new java.util.ArrayList<java.lang.String>(_list28.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem29;
              for (int _i30 = 0; _i30 < _list28.size; ++_i30)
              {
                _elem29 = iprot.readString();
                _elem26.add(_elem29);
              }
            }
            struct.peers.add(_elem26);
          }
        }
        struct.setPeersIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.portCapability = new java.util.ArrayList<java.lang.Byte>(_list31.size);
          byte _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readByte();
            struct.portCapability.add(_elem32);
          }
        }
        struct.setPortCapabilityIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.portState = new java.util.ArrayList<java.lang.Byte>(_list34.size);
          byte _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = iprot.readByte();
            struct.portState.add(_elem35);
          }
        }
        struct.setPortStateIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.portRate = new java.util.ArrayList<java.lang.Byte>(_list37.size);
          byte _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readByte();
            struct.portRate.add(_elem38);
          }
        }
        struct.setPortRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

