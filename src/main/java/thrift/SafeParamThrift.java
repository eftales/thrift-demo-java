/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-06-14")
public class SafeParamThrift implements org.apache.thrift.TBase<SafeParamThrift, SafeParamThrift._Fields>, java.io.Serializable, Cloneable, Comparable<SafeParamThrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SafeParamThrift");

  private static final org.apache.thrift.protocol.TField CHECK_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("checkMethod", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField CHECK_ALG_FIELD_DESC = new org.apache.thrift.protocol.TField("checkAlg", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ENCRYP_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("encrypMethod", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField ENCRYP_ALG_FIELD_DESC = new org.apache.thrift.protocol.TField("encrypAlg", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField RAND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("randNum", org.apache.thrift.protocol.TType.I16, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SafeParamThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SafeParamThriftTupleSchemeFactory();

  public byte checkMethod; // required
  public byte checkAlg; // required
  public byte encrypMethod; // required
  public byte encrypAlg; // required
  public short randNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHECK_METHOD((short)1, "checkMethod"),
    CHECK_ALG((short)2, "checkAlg"),
    ENCRYP_METHOD((short)3, "encrypMethod"),
    ENCRYP_ALG((short)4, "encrypAlg"),
    RAND_NUM((short)5, "randNum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHECK_METHOD
          return CHECK_METHOD;
        case 2: // CHECK_ALG
          return CHECK_ALG;
        case 3: // ENCRYP_METHOD
          return ENCRYP_METHOD;
        case 4: // ENCRYP_ALG
          return ENCRYP_ALG;
        case 5: // RAND_NUM
          return RAND_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHECKMETHOD_ISSET_ID = 0;
  private static final int __CHECKALG_ISSET_ID = 1;
  private static final int __ENCRYPMETHOD_ISSET_ID = 2;
  private static final int __ENCRYPALG_ISSET_ID = 3;
  private static final int __RANDNUM_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHECK_METHOD, new org.apache.thrift.meta_data.FieldMetaData("checkMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.CHECK_ALG, new org.apache.thrift.meta_data.FieldMetaData("checkAlg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ENCRYP_METHOD, new org.apache.thrift.meta_data.FieldMetaData("encrypMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ENCRYP_ALG, new org.apache.thrift.meta_data.FieldMetaData("encrypAlg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RAND_NUM, new org.apache.thrift.meta_data.FieldMetaData("randNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SafeParamThrift.class, metaDataMap);
  }

  public SafeParamThrift() {
  }

  public SafeParamThrift(
    byte checkMethod,
    byte checkAlg,
    byte encrypMethod,
    byte encrypAlg,
    short randNum)
  {
    this();
    this.checkMethod = checkMethod;
    setCheckMethodIsSet(true);
    this.checkAlg = checkAlg;
    setCheckAlgIsSet(true);
    this.encrypMethod = encrypMethod;
    setEncrypMethodIsSet(true);
    this.encrypAlg = encrypAlg;
    setEncrypAlgIsSet(true);
    this.randNum = randNum;
    setRandNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SafeParamThrift(SafeParamThrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.checkMethod = other.checkMethod;
    this.checkAlg = other.checkAlg;
    this.encrypMethod = other.encrypMethod;
    this.encrypAlg = other.encrypAlg;
    this.randNum = other.randNum;
  }

  public SafeParamThrift deepCopy() {
    return new SafeParamThrift(this);
  }

  @Override
  public void clear() {
    setCheckMethodIsSet(false);
    this.checkMethod = 0;
    setCheckAlgIsSet(false);
    this.checkAlg = 0;
    setEncrypMethodIsSet(false);
    this.encrypMethod = 0;
    setEncrypAlgIsSet(false);
    this.encrypAlg = 0;
    setRandNumIsSet(false);
    this.randNum = 0;
  }

  public byte getCheckMethod() {
    return this.checkMethod;
  }

  public SafeParamThrift setCheckMethod(byte checkMethod) {
    this.checkMethod = checkMethod;
    setCheckMethodIsSet(true);
    return this;
  }

  public void unsetCheckMethod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKMETHOD_ISSET_ID);
  }

  /** Returns true if field checkMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckMethod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKMETHOD_ISSET_ID);
  }

  public void setCheckMethodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKMETHOD_ISSET_ID, value);
  }

  public byte getCheckAlg() {
    return this.checkAlg;
  }

  public SafeParamThrift setCheckAlg(byte checkAlg) {
    this.checkAlg = checkAlg;
    setCheckAlgIsSet(true);
    return this;
  }

  public void unsetCheckAlg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHECKALG_ISSET_ID);
  }

  /** Returns true if field checkAlg is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckAlg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHECKALG_ISSET_ID);
  }

  public void setCheckAlgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHECKALG_ISSET_ID, value);
  }

  public byte getEncrypMethod() {
    return this.encrypMethod;
  }

  public SafeParamThrift setEncrypMethod(byte encrypMethod) {
    this.encrypMethod = encrypMethod;
    setEncrypMethodIsSet(true);
    return this;
  }

  public void unsetEncrypMethod() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCRYPMETHOD_ISSET_ID);
  }

  /** Returns true if field encrypMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetEncrypMethod() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCRYPMETHOD_ISSET_ID);
  }

  public void setEncrypMethodIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCRYPMETHOD_ISSET_ID, value);
  }

  public byte getEncrypAlg() {
    return this.encrypAlg;
  }

  public SafeParamThrift setEncrypAlg(byte encrypAlg) {
    this.encrypAlg = encrypAlg;
    setEncrypAlgIsSet(true);
    return this;
  }

  public void unsetEncrypAlg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENCRYPALG_ISSET_ID);
  }

  /** Returns true if field encrypAlg is set (has been assigned a value) and false otherwise */
  public boolean isSetEncrypAlg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENCRYPALG_ISSET_ID);
  }

  public void setEncrypAlgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENCRYPALG_ISSET_ID, value);
  }

  public short getRandNum() {
    return this.randNum;
  }

  public SafeParamThrift setRandNum(short randNum) {
    this.randNum = randNum;
    setRandNumIsSet(true);
    return this;
  }

  public void unsetRandNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANDNUM_ISSET_ID);
  }

  /** Returns true if field randNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRandNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANDNUM_ISSET_ID);
  }

  public void setRandNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANDNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHECK_METHOD:
      if (value == null) {
        unsetCheckMethod();
      } else {
        setCheckMethod((java.lang.Byte)value);
      }
      break;

    case CHECK_ALG:
      if (value == null) {
        unsetCheckAlg();
      } else {
        setCheckAlg((java.lang.Byte)value);
      }
      break;

    case ENCRYP_METHOD:
      if (value == null) {
        unsetEncrypMethod();
      } else {
        setEncrypMethod((java.lang.Byte)value);
      }
      break;

    case ENCRYP_ALG:
      if (value == null) {
        unsetEncrypAlg();
      } else {
        setEncrypAlg((java.lang.Byte)value);
      }
      break;

    case RAND_NUM:
      if (value == null) {
        unsetRandNum();
      } else {
        setRandNum((java.lang.Short)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHECK_METHOD:
      return getCheckMethod();

    case CHECK_ALG:
      return getCheckAlg();

    case ENCRYP_METHOD:
      return getEncrypMethod();

    case ENCRYP_ALG:
      return getEncrypAlg();

    case RAND_NUM:
      return getRandNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHECK_METHOD:
      return isSetCheckMethod();
    case CHECK_ALG:
      return isSetCheckAlg();
    case ENCRYP_METHOD:
      return isSetEncrypMethod();
    case ENCRYP_ALG:
      return isSetEncrypAlg();
    case RAND_NUM:
      return isSetRandNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SafeParamThrift)
      return this.equals((SafeParamThrift)that);
    return false;
  }

  public boolean equals(SafeParamThrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_checkMethod = true;
    boolean that_present_checkMethod = true;
    if (this_present_checkMethod || that_present_checkMethod) {
      if (!(this_present_checkMethod && that_present_checkMethod))
        return false;
      if (this.checkMethod != that.checkMethod)
        return false;
    }

    boolean this_present_checkAlg = true;
    boolean that_present_checkAlg = true;
    if (this_present_checkAlg || that_present_checkAlg) {
      if (!(this_present_checkAlg && that_present_checkAlg))
        return false;
      if (this.checkAlg != that.checkAlg)
        return false;
    }

    boolean this_present_encrypMethod = true;
    boolean that_present_encrypMethod = true;
    if (this_present_encrypMethod || that_present_encrypMethod) {
      if (!(this_present_encrypMethod && that_present_encrypMethod))
        return false;
      if (this.encrypMethod != that.encrypMethod)
        return false;
    }

    boolean this_present_encrypAlg = true;
    boolean that_present_encrypAlg = true;
    if (this_present_encrypAlg || that_present_encrypAlg) {
      if (!(this_present_encrypAlg && that_present_encrypAlg))
        return false;
      if (this.encrypAlg != that.encrypAlg)
        return false;
    }

    boolean this_present_randNum = true;
    boolean that_present_randNum = true;
    if (this_present_randNum || that_present_randNum) {
      if (!(this_present_randNum && that_present_randNum))
        return false;
      if (this.randNum != that.randNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (checkMethod);

    hashCode = hashCode * 8191 + (int) (checkAlg);

    hashCode = hashCode * 8191 + (int) (encrypMethod);

    hashCode = hashCode * 8191 + (int) (encrypAlg);

    hashCode = hashCode * 8191 + randNum;

    return hashCode;
  }

  @Override
  public int compareTo(SafeParamThrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCheckMethod(), other.isSetCheckMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkMethod, other.checkMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheckAlg(), other.isSetCheckAlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckAlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkAlg, other.checkAlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncrypMethod(), other.isSetEncrypMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncrypMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encrypMethod, other.encrypMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEncrypAlg(), other.isSetEncrypAlg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncrypAlg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encrypAlg, other.encrypAlg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRandNum(), other.isSetRandNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randNum, other.randNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SafeParamThrift(");
    boolean first = true;

    sb.append("checkMethod:");
    sb.append(this.checkMethod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkAlg:");
    sb.append(this.checkAlg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encrypMethod:");
    sb.append(this.encrypMethod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("encrypAlg:");
    sb.append(this.encrypAlg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("randNum:");
    sb.append(this.randNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SafeParamThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SafeParamThriftStandardScheme getScheme() {
      return new SafeParamThriftStandardScheme();
    }
  }

  private static class SafeParamThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<SafeParamThrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SafeParamThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHECK_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.checkMethod = iprot.readByte();
              struct.setCheckMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHECK_ALG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.checkAlg = iprot.readByte();
              struct.setCheckAlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENCRYP_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.encrypMethod = iprot.readByte();
              struct.setEncrypMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENCRYP_ALG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.encrypAlg = iprot.readByte();
              struct.setEncrypAlgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RAND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.randNum = iprot.readI16();
              struct.setRandNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SafeParamThrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHECK_METHOD_FIELD_DESC);
      oprot.writeByte(struct.checkMethod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_ALG_FIELD_DESC);
      oprot.writeByte(struct.checkAlg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCRYP_METHOD_FIELD_DESC);
      oprot.writeByte(struct.encrypMethod);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENCRYP_ALG_FIELD_DESC);
      oprot.writeByte(struct.encrypAlg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAND_NUM_FIELD_DESC);
      oprot.writeI16(struct.randNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SafeParamThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SafeParamThriftTupleScheme getScheme() {
      return new SafeParamThriftTupleScheme();
    }
  }

  private static class SafeParamThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<SafeParamThrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SafeParamThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCheckMethod()) {
        optionals.set(0);
      }
      if (struct.isSetCheckAlg()) {
        optionals.set(1);
      }
      if (struct.isSetEncrypMethod()) {
        optionals.set(2);
      }
      if (struct.isSetEncrypAlg()) {
        optionals.set(3);
      }
      if (struct.isSetRandNum()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCheckMethod()) {
        oprot.writeByte(struct.checkMethod);
      }
      if (struct.isSetCheckAlg()) {
        oprot.writeByte(struct.checkAlg);
      }
      if (struct.isSetEncrypMethod()) {
        oprot.writeByte(struct.encrypMethod);
      }
      if (struct.isSetEncrypAlg()) {
        oprot.writeByte(struct.encrypAlg);
      }
      if (struct.isSetRandNum()) {
        oprot.writeI16(struct.randNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SafeParamThrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.checkMethod = iprot.readByte();
        struct.setCheckMethodIsSet(true);
      }
      if (incoming.get(1)) {
        struct.checkAlg = iprot.readByte();
        struct.setCheckAlgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.encrypMethod = iprot.readByte();
        struct.setEncrypMethodIsSet(true);
      }
      if (incoming.get(3)) {
        struct.encrypAlg = iprot.readByte();
        struct.setEncrypAlgIsSet(true);
      }
      if (incoming.get(4)) {
        struct.randNum = iprot.readI16();
        struct.setRandNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

